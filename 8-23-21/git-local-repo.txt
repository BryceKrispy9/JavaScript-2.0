In Powershell (Possibly Terminal):

mkdir my-git-project

cd my-git-project

echo my-file.js 
(Create file)

vim my-file.js
(Enter info)

git init
(Initializes repo and location on PC - creates a .git file that is invisible - use ls -la to see)

git status

git add . (or git add my-file.js)

git status

git commit -m "Initial commit" ('-m' means 'message')



---How to push repo to GitHub---

On GitHub, create new repository

Second window on Code page:

git remote add origin git@github.com:username/project-name.git
(Adding a connection to a remote repository) (Origin is default name for whatever hosting service you're using)

git remote -v
(Fetch access is the ability to grab code, not push new code)

git push -u origin master
(Push code to origin branch (master or a feature branch))



---Git Workflow---

1. Create a new file (README.md for example [md = markdown])
```
# My project (Header)

> My code for the git project
```

git add .

git status

git commit -m "Added readme file to repo"

git push



---What is in the .git directory?---

.git > branches
Feature branches or other config items

.git > hooks
Tool and a process that can be run at a specific time (Establish rules before a user pushes code)

.git > info
Shows items that you can exclude + more

.git > logs (git log)
Shows a list of all of the commit messages and a log of those commits

.git > objects
Objects in memory (Never really gonna use)

.git > refs
Actual references to commits and see origin master & tags
See what last commit was and edit the message (Rare that you need to use unless you made a mistake on the commit message)
Config file with repo configuration, remote origin and merge variable lists
Index is status message (what branch, if up to date, or anything to commit)



---How to hide files/directories in Git with gitignore---

This is mainly meant for API keys, passwords to connect to, etc.

echo .gitignore
-> Add file name (For example: secrets.yml)

git rm -r --cached .
(This will delete all of cached changes on local machine - don't do on regular basis, only if you get an error when pushing with .gitignore)

git add -m "Added gitignore file and deleted git cache"

git commit -m "Added gitignore file and deleted git cache"

mkdir node_modules

echo node_modules/one.js node_modules/two.js node_modules/three.js

In .gitignore add node_modules/

git add .

git commit -m "Updated gitignore file to include node_modules directory"

git push